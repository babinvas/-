import java.util.LinkedHashMap;
import java.util.Map;
import java.lang.Object;

/*
JavaRush. Java Core. Уровень 22. Лекция 8. (2107)

Глубокое клонирование карты

Обеспечь возможность клонирования объекта класса Solution используя глубокое клонирование.
Данные в карте users также должны быть клонированы.
Не забудь о методах equals и hashCode для корректного добавления элементов типа User в HashMap.
*/

public class Solution implements Cloneable {

    public static void main(String[] args) {
        Solution solution = new Solution();
        solution.users.put("Hubert", new User(172, "Hubert"));
        solution.users.put("Zapp", new User(41, "Zapp"));
        Solution clone = null;
        try {
            clone = (Solution) solution.clone();
            System.out.println(solution);
            System.out.println(clone);

            System.out.println(solution.users);
            System.out.println(clone.users);

        } catch (CloneNotSupportedException e) {
            e.printStackTrace(System.err);
        }
    }

    protected Map<String, User> users = new LinkedHashMap();

    @Override
    public Object clone() throws CloneNotSupportedException {
        Solution newSolution = new Solution();

        for (Map.Entry<String, User> user : users.entrySet()) {
            String key = user.getKey();
            User value = user.getValue();
            newSolution.users.put(key, new User(value.age, value.name));
        }

        return newSolution;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;

        if (o == null || getClass() != o.getClass())
            return false;

        Solution solution = (Solution) o;

        return users != null ? users.equals(solution.users) : solution.users == null;
    }

    @Override
    public int hashCode() {
        return users != null ? users.hashCode() : 0;
    }

    public static class User implements Cloneable {
        int age;
        String name;

        public User(int age, String name) {
            this.age = age;
            this.name = name;
        }

        @Override
        public Object clone() throws CloneNotSupportedException {
            return super.clone();
        }

        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;

            if (o == null || getClass() != o.getClass())
                return false;

            User user = (User) o;

            return age == user.age && (name == user.name || name.equals(user.name));
        }

        @Override
        public int hashCode() {
            int result;
            result = 31 * age;
            result += 31 * (name != null ? name.hashCode() : 0);
            return result;
        }
    }
}
