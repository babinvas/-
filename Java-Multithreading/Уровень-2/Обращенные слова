import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/*
JavaRush. Java Multithreading. Уровень 23. Лекция 9 (2207)

Обращенные слова

В методе main с консоли считать имя файла, который содержит слова, разделенные пробелами.
Найти в тексте все пары слов, которые являются обращением друг друга. Добавить их в result.
Использовать StringBuilder.
Кодировка файла - UTF-8.

Пример содержимого файла
рот тор торт о
о тот тот тот

Вывод:
рот тор
о о
тот тот
*/

public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader reader;

        reader =  new BufferedReader(new InputStreamReader(System.in));
        String fileName = reader.readLine();
        reader.close();

        reader = new BufferedReader((new FileReader(fileName)));

        List<String> wordsFromFile = new ArrayList<>();

        while(reader.ready()) {
            String lineFromFile = reader.readLine().trim();
            String[] words = lineFromFile.split(" ");

            for (String word : words) {
                wordsFromFile.add(word);
            }
        }

        reader.close();

        List<String> doubleWords = new ArrayList<>(wordsFromFile);

        while(!doubleWords.isEmpty()) {
            String word = doubleWords.remove(0);

            StringBuilder rev = new StringBuilder(word).reverse();
            String reversedWord = rev.toString();

            if (doubleWords.contains(reversedWord)) {
                int indexOfReversedWord = doubleWords.indexOf(reversedWord);
                reversedWord = doubleWords.remove(indexOfReversedWord);

                result.add(new Pair(word, reversedWord));
            }
        }

        for (Pair a : result) {
            System.out.println(a);
        }
    }

    public static class Pair {
        String first;
        String second;

        public Pair() {
        }

        public Pair(String first, String second) {
            this.first = first;
            this.second = second;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            if (first != null ? !first.equals(pair.first) : pair.first != null) return false;
            return second != null ? second.equals(pair.second) : pair.second == null;

        }

        @Override
        public int hashCode() {
            int result = first != null ? first.hashCode() : 0;
            result = 31 * result + (second != null ? second.hashCode() : 0);
            return result;
        }

        @Override
        public String toString() {
            return first == null && second == null ? "" :
                    first == null ? second :
                            second == null ? first :
                                    first.compareTo(second) < 0 ? first + " " + second : second + " " + first;

        }
    }
}
